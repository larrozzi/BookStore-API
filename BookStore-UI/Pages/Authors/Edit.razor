@page "/authors/edit/{Id}"

@inject IAuthorRepository _repo
@inject NavigationManager _navManager

<h3>Edit Author</h3>
@if (isFailed)
{
    <ErrorMessage Message="Something went wrong with the edit operation" />
}

@if (Model == null)
{
    <LoadingMessage Message="Loading Author For Edit" />
}
else
{
<EditForm Model="Model" OnValidSubmit="EditAuthor">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="firstname">First Name</label>
        <InputText @bind-Value="Model.Firstname" class="form-control" id="firstname" />
    </div>
    <div class="form-group">
        <label for="lastname">Last Name</label>
        <InputText @bind-Value="Model.Lastname" class="form-control" id="lastname" />
    </div>
    <div class="form-group">
        <label for="lastname">Biography</label>
        <InputTextArea @bind-Value="Model.Bio" class="form-control" id="bio" />
    </div>
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Submit changes
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span>
        Back To List
    </button>
</EditForm>

}



@code {
    [Parameter]
    public string Id { get; set; }

    private Author Model = new Author();
    private bool isFailed = false;

    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        Model = await _repo.Get(Endpoints.AuthorsEndpoint, id);
    }

    private async Task EditAuthor()
    {
        bool isSuccess = await _repo.Update(Endpoints.AuthorsEndpoint, Model, Model.Id);
        if (isSuccess)
        {
            BackToList();
        }
        else
        {
            isFailed = true;
        }
    }
    private void BackToList()
    {
        _navManager.NavigateTo("/authors/");
    }

}

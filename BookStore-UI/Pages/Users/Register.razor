@page "/Register"

@using BookStore_UI.Contracts
@using BookStore_UI.Models

@inject IAuthenticationRepository _authRepo
@inject NavigationManager _navManager

<h3 class="card-title">Register Now</h3>
@if (!response)
{
    <ErrorMessage Message="Something went wrong with the registration attempt"/>
}

<div class="card-body">
    <EditForm Model="Model" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email" class="form-label">Email address</label>
            <InputText Id="email" class="form-control" @bind-Value="Model.EmailAddress" />
            <ValidationMessage For="@(() => Model.EmailAddress)" />
        </div>
        <div class="form-group">
            <label for="password" class="form-label">Password</label>
            <InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password" />
            <ValidationMessage For="@(() => Model.Password)" />
        </div>
        <div class="form-group">
            <label for="confirmpassword" class="form-label">Confirm Password</label>
            <InputText Id="confirmpassword" type="password" class="form-control" @bind-Value="Model.ConfirmPassword" />
            <ValidationMessage For="@(() => Model.ConfirmPassword)" />
        </div>
        <button type="submit" class="btn btn-primary btn-block">Register</button>
    </EditForm>
</div>


@code {
    private RegistrationModel Model = new RegistrationModel();
    bool response = true;

    private async Task HandleRegistration()
    {
        var response = await _authRepo.Register(Model);

        if (response)
        {
            _navManager.NavigateTo("/login");
        }

    }
}
